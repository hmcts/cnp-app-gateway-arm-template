{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "uksouth"
      },
      "appgwName": {
        "type": "string"
      },
      "tier": {
        "type": "string",
        "defaultValue": "Standard_v2"
      },
      "skuSize": {
        "type": "string",
        "defaultValue": "Standard_v2"
      },
      "capacity": {
        "type": "int",
        "defaultValue": 2
      },
      "autoScaleMaxCapacity": {
        "type": "int",
        "defaultValue": 10
      },
      "frontEndPort": {
        "type": "int",
        "defaultValue": 80
      },
      "enableHttp2": {
        "type": "bool",
        "defaultValue": true
      },
      "zones": {
        "type": "array",
        "defaultValue": []
      },
      "backendIpAddress": {
        "type": "string"
      },
      "invalidHostForProbe": {
        "type": "string",
        "defaultValue": "host.never.exists.rr"
      },
      "shortName": {
        "type": "string",
        "metadata": {
          "description": "Environment short nme used for resource group allocation"
        }
      }
    },
    "variables": {
      "VirtualNetworkResourceGroup": "[concat('core-infra-',parameters('shortName'))]",
      "VirtualNetworkName": "[concat('core-infra-vnet-',parameters('shortName'))]",
      "VirtualNetworkSubnetName": "[concat('core-infra-subnet-appgw-',parameters('shortName'))]",
      "SubnetResourceId": "[resourceId(variables('VirtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',variables('VirtualNetworkName'),variables('VirtualNetworkSubnetName'))]",
      "publicIPAddressName": "core-infra-preview-publicIp1",
      "publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
      "applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways', parameters('appgwName'))]"
    },
    "resources": [
      {
        "apiVersion": "2018-08-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[parameters('location')]",
        "sku":{
          "name":"Standard"
        },
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "name": "[parameters('appgwName')]",
        "type": "Microsoft.Network/applicationGateways",
        "apiVersion": "2018-12-01",
        "location": "[parameters('location')]",
        "zones": "[parameters('zones')]",
        "comments": "probes.host is set to host.never.exists.rr so that it is invalid so that traefik will ignore the hostname and pick default one",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
        ],
        "properties": {
          "sku": {
            "name": "[parameters('skuSize')]",
            "tier": "[parameters('tier')]",
            "capacity": "[parameters('capacity')]"
          },
          "gatewayIPConfigurations": [
            {
              "name": "appGatewayIpConfig",
              "properties": {
                "subnet": {
                  "id": "[variables('SubnetResourceId')]"
                }
              }
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "appGatewayFrontendIP",
              "properties": {
                "PublicIPAddress": {
                  "id": "[variables('publicIPRef')]"
                }
              }
            }
          ],
          "frontendPorts": [
            {
              "name": "appGatewayFrontendPort",
              "properties": {
                "Port": 80
              }
            }
          ],
          "probes": [
            {
              "properties": {
                "protocol": "http",
                "path": "/ping",
                "interval": "30",
                "timeout": "30",
                "unhealthyThreshold": "3",
                "host": "[parameters('invalidHostForProbe')]",
                "match": {
                  "statusCodes": [
                    "200-299"
                  ]
                }
              },
              "name": "appGatewayProbe"
            }
          ],
          "backendAddressPools": [
            {
              "name": "appGatewayBackendPool",
              "properties": {
                "BackendAddresses": [
                  {
                    "IpAddress": "[parameters('backendIpAddress')]"
                  }
                ]
              }
            }
          ],
          "backendHttpSettingsCollection": [
            {
              "name": "appGatewayBackendHttpSettings",
              "properties": {
                "Port": 80,
                "Protocol": "Http",
                "CookieBasedAffinity": "Disabled",
                "connectionDraining": {
                  "enabled": true,
                  "drainTimeoutInSec": "60"
                },
                "probe": {
                  "id": "[concat(variables('applicationGatewayID'), '/probes/appGatewayProbe')]"
                }
              }
            }
          ],
          "httpListeners": [
            {
              "name": "appGatewayHttpListener",
              "properties": {
                "FrontendIPConfiguration": {
                  "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
                },
                "FrontendPort": {
                  "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
                },
                "Protocol": "Http",
                "SslCertificate": null
              }
            }
          ],
          "requestRoutingRules": [
            {
              "Name": "rule1",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayHttpListener')]"
                },
                "backendAddressPool": {
                  "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
                },
                "backendHttpSettings": {
                  "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
                }
              }
            }
          ],
          "enableHttp2": "[parameters('enableHttp2')]",
          "sslCertificates": []
        }
      }
    ]
  }
  